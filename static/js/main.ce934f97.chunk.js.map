{"version":3,"sources":["components/Header.js","actions/index.js","containers/Search.js","App.js","serviceWorker.js","reducers/index.js","sagas/index.js","index.js"],"names":["Header","className","style","marginTop","SEARCH_ELEV","UPDATE_SEARCH_RESULT","Search","i","chunks","this","props","result","length","push","slice","type","placeholder","ref","node","keywordRef","size","onKeyDown","e","value","trim","key","onDispatchSearch","minLength","onClick","map","tiles","idx0","tile","idx1","dangerouslySetInnerHTML","__html","title","id","Component","ConnectedSearch","connect","state","keyword","dispatch","searchELEV","App","Boolean","window","location","hostname","match","initialState","fetchELEV","handleSearchELEV","rootSaga","action","url","call","fetch","headers","Authorization","response","json","jsonData","put","results","takeEvery","all","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce934f97.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Header() {\n  return (\n    <div className=\"tile is-ancestor\" style={{ marginTop: 20 }}>\n      <div className=\"tile is-parent is-12\">\n        <div className=\"tile is-child\">\n          <p className=\"title\">Elev.io rest app by Rob Lao</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","export const SEARCH_ELEV = 'SEARCH_ELEV';\nexport const UPDATE_SEARCH_RESULT = 'UPDATE_SEARCH_RESULT';\n\nexport function searchELEV(keyword) {\n  return {\n    type: SEARCH_ELEV,\n    keyword\n  };\n}\n\nexport function updateSearchResult(result) {\n  return {\n    type: UPDATE_SEARCH_RESULT,\n    result\n  };\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { searchELEV } from '../actions';\n\nconst chunkLength = 4;\n\nclass Search extends Component {\n  keywordRef;\n\n  render() {\n    let chunks = [];\n    let i;\n    for (i = 0; i < this.props.result.length; i += chunkLength) {\n      chunks.push(this.props.result.slice(i, i + chunkLength));\n    }\n    return (\n      <>\n        <section className=\"section\">\n          <nav className=\"level\">\n            <div className=\"level-item\">\n              <div className=\"field has-addons\">\n                <p className=\"control\">\n                  <input\n                    className=\"input\"\n                    type=\"text\"\n                    placeholder=\"Type anything to search...\"\n                    ref={node => (this.keywordRef = node)}\n                    size=\"50\"\n                    onKeyDown={e => {\n                      if (!this.keywordRef.value.trim()) {\n                        return;\n                      }\n                      if (e.key !== 'Enter') {\n                        return;\n                      }\n                      this.props.onDispatchSearch(this.keywordRef.value.trim());\n                    }}\n                    minLength={3}\n                  />\n                </p>\n                <p className=\"control\">\n                  <button\n                    className=\"button is-primary\"\n                    onClick={e => {\n                      if (!this.keywordRef.value.trim()) {\n                        return;\n                      }\n                      this.props.onDispatchSearch(this.keywordRef.value.trim());\n                    }}\n                  >\n                    Search\n                  </button>\n                </p>\n              </div>\n            </div>\n          </nav>\n        </section>\n        <section className=\"section\">\n          {chunks.map((tiles, idx0) => {\n            return (\n              <div className=\"tile is-ancestor\" key={`tiles-${idx0}`}>\n                {tiles.map((tile, idx1) => {\n                  return (\n                    <div\n                      className={`tile is-parent is-${12 / chunkLength}`}\n                      key={`tile-${idx0}-${idx1}`}\n                    >\n                      <article className=\"tile is-child box\">\n                        <p\n                          className=\"subtitle is-5\"\n                          dangerouslySetInnerHTML={{ __html: tile.title }}\n                        ></p>\n                        <p className=\"subtitle is-6\">{tile.id}</p>\n                      </article>\n                    </div>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </section>\n      </>\n    );\n  }\n}\n\nconst mapSearchStateToProps = state => {\n  return {\n    keyword: state.keyword,\n    result: state.result\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onDispatchSearch: keyword => dispatch(searchELEV(keyword))\n  };\n};\n\nconst ConnectedSearch = connect(\n  mapSearchStateToProps,\n  mapDispatchToProps\n)(Search);\n\nexport default ConnectedSearch;\n","import React from 'react';\nimport './App.css';\n\nimport Header from './components/Header';\nimport Search from './containers/Search';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Header />\n        <Search />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SEARCH_ELEV, UPDATE_SEARCH_RESULT } from '../actions';\n\nconst initialState = {\n  keyword: '',\n  result: []\n};\n\nexport default function elevReducer(state = initialState, action) {\n  switch (action.type) {\n    case SEARCH_ELEV:\n      return { ...state, keyword: action.keyword };\n    case UPDATE_SEARCH_RESULT:\n      return { ...state, result: action.result };\n    default:\n      return state;\n  }\n}\n","import { all, call, put, takeEvery } from 'redux-saga/effects';\nimport { SEARCH_ELEV } from '../actions';\nimport { updateSearchResult } from '../actions';\n\nexport function* fetchELEV(action) {\n  const url = `https://api.elevio-staging.com/v1/search/en?query=${action.keyword}`;\n  const response = yield call(fetch, url, {\n    headers: {\n      'x-api-key': '33541da8ea5006bf4371f7a255f3af64',\n      Authorization:\n        'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2FwcC5lbGV2aW8tc3RhZ2luZy5jb20iLCJzdWIiOiI1ZDU5NDQ5YWQ3ZjMwIiwiZXhwIjozMTQyOTMyMDExLCJpYXQiOjE1NjYxMzIwMTEsImp0aSI6IjFqY3U3YnIxN3FuYnBmbmMzODF1dXE3aWFnOWhzN2Y5IiwKICAidXNlck5hbWUiIDogInJvYmxhb0B2aWV3cGwuY29tIiwKICAidXNlcklkIiA6IDEzMDc2LAogICJzY29wZSIgOiBbICJyZWFkOmNvbnRleHR1YWwiLCAid3JpdGU6Y29udGV4dHVhbCIsICJyZWFkOmNhcmQiLCAid3JpdGU6Y2FyZCIsICJhcHByb3ZlOmFydGljbGUiLCAicmVhZDphcnRpY2xlIiwgIndyaXRlOmFydGljbGUiIF0KfQ.GQwDHCKaQ7ikpmSop110ySF3FesXU4a4VO48S2aXDBE'\n    }\n  });\n  const jsonData = yield response.json();\n  yield put(updateSearchResult(jsonData.results));\n}\n\nexport function* handleSearchELEV() {\n  yield takeEvery(SEARCH_ELEV, fetchELEV);\n}\n\nexport default function* rootSaga() {\n  yield all([handleSearchELEV()]);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport './index.css';\nimport 'bulma/css/bulma.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport elevReducer from './reducers';\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(elevReducer, applyMiddleware(sagaMiddleware));\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}